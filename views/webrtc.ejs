<!DOCTYPE html>
<html>

<head>
  <title>AjnaBuild</title>
  <link rel="stylesheet" href="/css/main.css"/>
  <!-- <script src="./js/three/build/three.min.js"></script> -->
	<!-- <script src="./js/three/examples/jsm/controls/OrbitControls.js"></script> -->
</head>

<body>
  <h1>AjnaBuild</h1>
  <video id="localVideo" style="display: none" autoplay muted playsinline></video>
  <video id="remoteVideo" style="display: none" autoplay muted playsinline></video>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
  <script src="/webRTC/main.js"></script>


  <script type="module">
    import * as THREE from '/three/build/three.module.js';
    import { OrbitControls } from '/three/jsm/controls/OrbitControls.js';
    var camera, scene, renderer, mesh_local, mesh_remote;

    init();
    animate();

    function init() {
      localVideo = document.getElementById('localVideo');
      remoteVideo = document.getElementById('remoteVideo');

      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);
      camera.position.z = 100;

      scene = new THREE.Scene();

      var texture_local = new THREE.VideoTexture(localVideo);
      var texture_remote = new THREE.VideoTexture(remoteVideo);

      var geometry_local = new THREE.PlaneGeometry(80, 45);
      var geometry_remote = new THREE.PlaneGeometry(80, 45);
      var material_local = new THREE.MeshBasicMaterial({ map: texture_local });
      var material_remote = new THREE.MeshBasicMaterial({ map: texture_remote });

      mesh_local = new THREE.Mesh(geometry_local, material_local);
      scene.add(mesh_local);

      mesh_remote = new THREE.Mesh(geometry_remote, material_remote);
      scene.add(mesh_remote);

      mesh_local.position.x = -30;
      mesh_local.position.y = 40;
      mesh_local.position.z = 0;

      mesh_remote.position.x = 30;
      mesh_remote.position.y = -40;
      mesh_remote.position.z = 0;


      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      var controls = new OrbitControls( camera, renderer.domElement );
      controls.enableZoom = false;
      controls.enablePan = false;

      window.addEventListener('resize', onWindowResize, false);

    }

    function onWindowResize() {

      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();

      renderer.setSize(window.innerWidth, window.innerHeight);

    }

    function animate() {

      requestAnimationFrame(animate);

      renderer.render(scene, camera);

    }
  </script>
 
  
</body>

</html>