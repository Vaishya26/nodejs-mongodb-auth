<!DOCTYPE html>
<html lang="en">
	<head>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">	
    	<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
		<title>AjnaConnect Room</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			
			 body 
			{
				width: 100vw;
				height: 100vh;
				margin: 0;
				/* background: black; */
				overflow: hidden;
				display: flex;
				justify-content: center;
				align-items: center;
			} 
					
		</style>
	</head>
	<body>
        
		<video id="monitor" autoplay width="480" height="204" style="display: none;"></video>
        <canvas id="videoImage" width="480" height="204" ></canvas>

        
            

        <div id="ThreeJS" style="position: absolute; left:0px; top:0px"></div>
		<script type="module">

			import * as THREE from 'three/build/three.module.js';

			import { OrbitControls } from 'three/jsm/controls/OrbitControls.js';

            var video, videoImage, videoImageContext, videoTexture;
            var container, scene, camera, renderer, controls;

            

			init();
			animate();

			function init() {

				// SCENE
                scene = new THREE.Scene();

                

                // CAMERA
                var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;
                var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;
                camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);
                scene.add(camera);
                camera.position.set(0,150,400);
                camera.lookAt(scene.position);	
                // RENDERER
                
                renderer = new THREE.WebGLRenderer( {antialias:true} );                
                renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
                container = document.getElementById( 'ThreeJS' );
                container.appendChild( renderer.domElement );

                // CONTROLS
                controls = new OrbitControls( camera, renderer.domElement );

                // FLOOR
                var floorTexture = new THREE.ImageUtils.loadTexture( 'three/textures/terrain/grasslight-big.jpg' );
                floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping; 
                floorTexture.repeat.set( 10, 10 );
                var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } );
                var floorGeometry = new THREE.PlaneGeometry(1000, 1000, 10, 10);
                var floor = new THREE.Mesh(floorGeometry, floorMaterial);
                floor.position.y = -0.5;
                floor.rotation.x = Math.PI / 2;
                scene.add(floor);
                // SKYBOX/FOG
                var skyBoxGeometry = new THREE.CubeGeometry( 10000, 10000, 10000 );
                var skyBoxMaterial = new THREE.MeshBasicMaterial( { color: 0x9999ff, side: THREE.BackSide } );
                var skyBox = new THREE.Mesh( skyBoxGeometry, skyBoxMaterial );
                scene.add(skyBox);
                scene.fog = new THREE.FogExp2( 0x9999ff, 0.00025 );
                
                //video
                video = document.getElementById( 'monitor' );
	
                videoImage = document.getElementById( 'videoImage' );
                videoImageContext = videoImage.getContext( '2d' );
                // background color if no video present
                videoImageContext.fillStyle = '#000000';
                videoImageContext.fillRect( 0, 0, videoImage.width, videoImage.height );

                videoTexture = new THREE.Texture( videoImage );
                videoTexture.minFilter = THREE.LinearFilter;
                videoTexture.magFilter = THREE.LinearFilter;
                
                var movieMaterial = new THREE.MeshBasicMaterial( { map: videoTexture, overdraw: true, side:THREE.DoubleSide } );
                // the geometry on which the movie will be displayed;
                // 		movie image will be scaled to fit these dimensions.
                var movieGeometry = new THREE.PlaneGeometry( 240, 100, 4, 4 );
                var movieScreen = new THREE.Mesh( movieGeometry, movieMaterial );
                movieScreen.position.set(0,50,0);
                scene.add(movieScreen);
                
                camera.position.set(0,150,300);
                camera.lookAt(movieScreen.position);
				

				// window.addEventListener( 'resize', onWindowResize, false );

				//

				if ( navigator.mediaDevices && navigator.mediaDevices.getUserMedia ) {

					var constraints = { video: { width: 1280, height: 720, facingMode: 'user' } };

					navigator.mediaDevices.getUserMedia( constraints ).then( function ( stream ) {

						// apply the stream to the video element used in the texture

						video.srcObject = stream;
						video.play();

					} ).catch( function ( error ) {

						console.error( 'Unable to access the camera/webcam.', error );

					} );

				} else {

					console.error( 'MediaDevices interface not available.' );

				}

			}

			// function onWindowResize() {

			// 	camera.aspect = window.innerWidth / window.innerHeight;
			// 	camera.updateProjectionMatrix();

			// 	renderer.setSize( window.innerWidth, window.innerHeight );

			// }

            

			function animate() {

                requestAnimationFrame( animate );
                render();
				

            }
            
            function render() {	

                

                if ( video.readyState === video.HAVE_ENOUGH_DATA ) 
                {
                    videoImageContext.drawImage( video, 0, 0, videoImage.width, videoImage.height );
                    if ( videoTexture ) 
                        videoTexture.needsUpdate = true;
                }

                renderer.render( scene, camera );
                        }

		</script>

	</body>
</html>
